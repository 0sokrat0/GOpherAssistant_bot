package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const (
	BotToken = "8130389933:AAF6UbNo6KYCF3mQiK-1T2dsfIiMdlvUaTI" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
	AdminID  = 575225733                                        // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram user ID
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
type Answer struct {
	Type    string `json:"type"`
	Content string `json:"content"`
	Caption string `json:"caption"`
}

type DataItem struct {
	Text    string   `json:"text"`
	Answers []Answer `json:"answers"`
}

type Database struct {
	Step string     `json:"step"`
	Data []DataItem `json:"data"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π
type BusinessMessage struct {
	MessageID            int                       `json:"message_id"`
	From                 *tgbotapi.User            `json:"from"`
	BusinessConnectionID int64                     `json:"business_connection_id"`
	Chat                 *tgbotapi.Chat            `json:"chat"`
	Date                 int                       `json:"date"`
	Text                 string                    `json:"text"`
	Entities             *[]tgbotapi.MessageEntity `json:"entities,omitempty"`
	Caption              string                    `json:"caption,omitempty"`
	// –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

// –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
type CustomUpdate struct {
	UpdateID        int               `json:"update_id"`
	Message         *tgbotapi.Message `json:"message,omitempty"`
	BusinessMessage *BusinessMessage  `json:"business_message,omitempty"`
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func loadDatabase() (*Database, error) {
	db := &Database{}
	file, err := ioutil.ReadFile("db.json")
	if err != nil {
		if os.IsNotExist(err) {
			db.Step = ""
			db.Data = []DataItem{}
			return db, nil
		}
		return nil, err
	}
	err = json.Unmarshal(file, db)
	if err != nil {
		return nil, err
	}
	return db, nil
}

func saveDatabase(db *Database) error {
	data, err := json.Marshal(db)
	if err != nil {
		return err
	}
	err = ioutil.WriteFile("db.json", data, 0644)
	if err != nil {
		return err
	}
	return nil
}

func main() {
	bot, err := tgbotapi.NewBotAPI(BotToken)
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
	// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ngrok URL
	webhookURL := "https://a13a-91-207-171-60.ngrok-free.app/" + bot.Token

	wh, err := tgbotapi.NewWebhook(webhookURL)
	if err != nil {
		log.Fatal(err)
	}

	_, err = bot.Request(wh)
	if err != nil {
		log.Fatal(err)
	}

	info, err := bot.GetWebhookInfo()
	if err != nil {
		log.Fatal(err)
	}

	if info.LastErrorDate != 0 {
		log.Printf("Telegram callback failed: %s", info.LastErrorMessage)
	}

	updates := bot.ListenForWebhook("/" + bot.Token)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –±–µ–∑ TLS
	go func() {
		err = http.ListenAndServe(":8443", nil)
		if err != nil {
			log.Fatal(err)
		}
	}()

	log.Println("Start listening for updates...")

	for update := range updates {
		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ JSON –∏ –æ–±—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å BusinessMessage
		rawData, err := json.Marshal(update)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err)
			continue
		}

		var customUpdate CustomUpdate
		err = json.Unmarshal(rawData, &customUpdate)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err)
			continue
		}

		handleUpdate(bot, &customUpdate)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func handleUpdate(bot *tgbotapi.BotAPI, update *CustomUpdate) {
	db, err := loadDatabase()
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if update.Message != nil && update.Message.From.ID == AdminID {
		handleAdminMessage(bot, update.Message, db)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π
	if update.BusinessMessage != nil && update.BusinessMessage.BusinessConnectionID != 0 {
		handleBusinessMessage(bot, update.BusinessMessage, db)
	}
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func handleAdminMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, db *Database) {
	chatID := message.Chat.ID
	text := message.Text

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
	homeKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("Add auto reply ‚úâÔ∏è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("remove auto reply üö´"),
		),
	)
	homeKeyboard.ResizeKeyboard = true

	backKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("Back üîô"),
		),
	)
	backKeyboard.ResizeKeyboard = true

	doneKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("Done!"),
		),
	)
	doneKeyboard.ResizeKeyboard = true

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —à–∞–≥–æ–≤
	switch text {
	case "/start":
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞! ü§ñ\n\n–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —á–∞—Ç-–±–æ—Ç–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞. üíº\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –æ–ø—Ü–∏—é. ‚ÑπÔ∏è")
		msg.ReplyMarkup = homeKeyboard
		bot.Send(msg)
		db.Step = ""
		saveDatabase(db)
	case "Back üîô", "Done!":
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
		msg.ReplyMarkup = homeKeyboard
		bot.Send(msg)
		db.Step = ""
		saveDatabase(db)
	case "Add auto reply ‚úâÔ∏è":
		msg := tgbotapi.NewMessage(chatID, "–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å (–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç)")
		msg.ReplyMarkup = backKeyboard
		bot.Send(msg)
		db.Step = "add-1"
		saveDatabase(db)
	case "remove auto reply üö´":
		if len(db.Data) > 0 {
			var list strings.Builder
			for _, item := range db.Data {
				list.WriteString(fmt.Sprintf("<code>%s</code>\n---\n", item.Text))
			}
			msg1 := tgbotapi.NewMessage(chatID, list.String())
			msg1.ParseMode = "HTML"
			bot.Send(msg1)

			msg2 := tgbotapi.NewMessage(chatID, "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö")
			msg2.ReplyMarkup = backKeyboard
			bot.Send(msg2)

			db.Step = "remove"
			saveDatabase(db)
		} else {
			msg := tgbotapi.NewMessage(chatID, "–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç!")
			msg.ReplyMarkup = homeKeyboard
			bot.Send(msg)
		}
	default:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤
		switch db.Step {
		case "add-1":
			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
			newItem := DataItem{
				Text:    text,
				Answers: []Answer{},
			}
			db.Data = append(db.Data, newItem)
			db.Step = "add-2"
			saveDatabase(db)

			msg := tgbotapi.NewMessage(chatID, "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç (–º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –ª—é–±–æ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF, —Å—Ç–∏–∫–µ—Ä, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç.–¥.)")
			msg.ReplyMarkup = backKeyboard
			bot.Send(msg)
		case "add-2":
			// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
			if len(db.Data) == 0 {
				db.Step = ""
				saveDatabase(db)
				return
			}
			lastIndex := len(db.Data) - 1
			lastItem := &db.Data[lastIndex]

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
			var answer Answer
			if message.Text != "" {
				answer.Type = "text"
				answer.Content = message.Text
			} else if message.Sticker != nil {
				answer.Type = "sticker"
				answer.Content = message.Sticker.FileID
			} else if message.Photo != nil {
				photo := message.Photo[len(message.Photo)-1]
				answer.Type = "photo"
				answer.Content = photo.FileID
			} else if message.Video != nil {
				answer.Type = "video"
				answer.Content = message.Video.FileID
			} else if message.Voice != nil {
				answer.Type = "voice"
				answer.Content = message.Voice.FileID
			} else if message.Document != nil {
				answer.Type = "file"
				answer.Content = message.Document.FileID
			} else if message.Audio != nil {
				answer.Type = "music"
				answer.Content = message.Audio.FileID
			} else if message.Animation != nil {
				answer.Type = "animation"
				answer.Content = message.Animation.FileID
			} else if message.VideoNote != nil {
				answer.Type = "video_note"
				answer.Content = message.VideoNote.FileID
			}

			if message.Caption != "" {
				answer.Caption = message.Caption
			}

			if answer.Type != "" {
				lastItem.Answers = append(lastItem.Answers, answer)
				saveDatabase(db)

				msg := tgbotapi.NewMessage(chatID, "‚úÖ –û—Ç–≤–µ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å 'Done!'")
				msg.ReplyMarkup = doneKeyboard
				bot.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(chatID, "–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –≤–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
				msg.ReplyMarkup = doneKeyboard
				bot.Send(msg)
			}
		case "remove":
			// –£–¥–∞–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
			removed := false
			for i, item := range db.Data {
				if item.Text == text {
					db.Data = append(db.Data[:i], db.Data[i+1:]...)
					removed = true
					break
				}
			}
			if removed {
				saveDatabase(db)
				msg := tgbotapi.NewMessage(chatID, "‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
				msg.ReplyMarkup = homeKeyboard
				bot.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(chatID, "–£–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
				msg.ReplyMarkup = backKeyboard
				bot.Send(msg)
			}
			db.Step = ""
			saveDatabase(db)
		default:
			// –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π
func handleBusinessMessage(bot *tgbotapi.BotAPI, bMessage *BusinessMessage, db *Database) {
	bText := bMessage.Text
	bChatID := bMessage.Chat.ID
	bID := strconv.FormatInt(bMessage.BusinessConnectionID, 10)
	bMessageID := strconv.Itoa(bMessage.MessageID)

	for _, item := range db.Data {
		if item.Text == bText {
			for index, answer := range item.Answers {
				params := url.Values{}
				params.Add("chat_id", strconv.FormatInt(bChatID, 10))
				params.Add("business_connection_id", bID)
				params.Add("parse_mode", "HTML")
				params.Add("disable_web_page_preview", "true")
				if index == 0 {
					params.Add("reply_to_message_id", bMessageID)
				}
				if answer.Caption != "" {
					params.Add("caption", answer.Caption)
				}
				switch answer.Type {
				case "text":
					params.Add("text", answer.Content)
					sendBotAPIRequest(BotToken, "sendMessage", params)
				case "sticker":
					params.Add("sticker", answer.Content)
					sendBotAPIRequest(BotToken, "sendSticker", params)
				case "photo":
					params.Add("photo", answer.Content)
					sendBotAPIRequest(BotToken, "sendPhoto", params)
				case "video":
					params.Add("video", answer.Content)
					sendBotAPIRequest(BotToken, "sendVideo", params)
				case "voice":
					params.Add("voice", answer.Content)
					sendBotAPIRequest(BotToken, "sendVoice", params)
				case "file":
					params.Add("document", answer.Content)
					sendBotAPIRequest(BotToken, "sendDocument", params)
				case "music":
					params.Add("audio", answer.Content)
					sendBotAPIRequest(BotToken, "sendAudio", params)
				case "animation":
					params.Add("animation", answer.Content)
					sendBotAPIRequest(BotToken, "sendAnimation", params)
				case "video_note":
					params.Add("video_note", answer.Content)
					sendBotAPIRequest(BotToken, "sendVideoNote", params)
				}
			}
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Telegram
func sendBotAPIRequest(token, method string, params url.Values) {
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/%s", token, method)
	resp, err := http.PostForm(apiURL, params)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		return
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫, –ø—Ä–æ–≤–µ—Ä–∏–≤ –æ—Ç–≤–µ—Ç
	log.Println("–û—Ç–≤–µ—Ç:", string(body))
}
