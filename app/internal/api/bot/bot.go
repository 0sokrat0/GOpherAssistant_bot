package bot

import (
	"context"
	"fmt"
	"sync"

	tb "gopkg.in/telebot.v4"
)

// Wrapper –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±–µ—Ä—Ç–∫—É –Ω–∞–¥ –±–æ—Ç–æ–º.
type Wrapper struct {
	bot       *tb.Bot
	config    *Config
	aiService Service
	states    map[int64]string // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	mu        sync.Mutex       // –ó–∞—â–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
}

// NewWrapper —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.
func NewWrapper(config *Config, aiService Service) (*Wrapper, error) {
	if err := config.Validate(); err != nil {
		return nil, err
	}

	settings := tb.Settings{
		Token:  config.Token,
		Poller: &tb.LongPoller{Timeout: config.Timeout},
	}

	bot, err := tb.NewBot(settings)
	if err != nil {
		return nil, err
	}

	w := &Wrapper{
		bot:       bot,
		config:    config,
		aiService: aiService,
		states:    make(map[int64]string), // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
	}

	w.setupHandlers()
	return w, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
func (w *Wrapper) Start(_ context.Context) error {
	w.bot.Start()
	return nil
}

// setupHandlers –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π.
func (w *Wrapper) setupHandlers() {
	// –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
	menu := &tb.ReplyMarkup{}
	btnGPT := menu.Data("üí¨ ChatGPT", "chat_gpt")
	btnBack := menu.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")

	menu.Inline(
		menu.Row(btnGPT),
	)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
	w.bot.Handle("/start", func(c tb.Context) error {
		message := "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–æ—à–∞, –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!"
		stickerID := "CAACAgIAAxkBAAENSmpnVLOt0C0CvGTQByda2SQiIJK4-gACqRcAAtoIAUn-P0sCoVKCnzYE" // –ü—Ä–∏–º–µ—Ä FileID

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
		sticker := &tb.Sticker{File: tb.File{FileID: stickerID}}
		if err := c.Send(sticker); err != nil {
			return fmt.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: %w", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
		return c.Send(message, &tb.SendOptions{
			ReplyMarkup: menu,
			ParseMode:   tb.ModeMarkdown,
		})
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ChatGPT
	w.bot.Handle(&btnGPT, func(c tb.Context) error {
		userID := c.Sender().ID

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
		w.setState(userID, "awaiting_text")

		// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
		backMenu := &tb.ReplyMarkup{}
		backMenu.Inline(backMenu.Row(btnBack))

		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
		if err := c.Respond(&tb.CallbackResponse{
			Text: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è ChatGPT.",
		}); err != nil {
			return err
		}

		// –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
		return c.Send("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ChatGPT.", &tb.SendOptions{
			ReplyMarkup: backMenu,
		})
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
	w.bot.Handle(&btnBack, func(c tb.Context) error {
		userID := c.Sender().ID

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		w.setState(userID, "")

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		return c.Send("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", &tb.SendOptions{
			ReplyMarkup: menu,
		})
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	w.bot.Handle(tb.OnText, func(c tb.Context) error {
		userID := c.Sender().ID

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if w.getState(userID) == "awaiting_text" {
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT
			return w.handleText(c)
		}

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
		return c.Send("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
	})
}

// handleText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è ChatGPT.
func (w *Wrapper) handleText(c tb.Context) error {
	txt := c.Text()

	// –ó–∞–ø—Ä–æ—Å –∫ GPT
	ctx := context.TODO()
	response, err := w.aiService.ChatCompletion(ctx, txt)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	formattedResponse := formatResponse(response)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	return sendLongMessage(c, formattedResponse)
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (w *Wrapper) setState(userID int64, state string) {
	w.mu.Lock()
	defer w.mu.Unlock()
	w.states[userID] = state
}

func (w *Wrapper) getState(userID int64) string {
	w.mu.Lock()
	defer w.mu.Unlock()
	return w.states[userID]
}
